fragment_downloaded_cb({"fragment": "<div id=\"page-description\" data-hotdoc-source=\"tools.md\">\n<h1 id=\"tools\">Tools</h1>\n<h2 id=\"ka-customizer\">KA Customizer</h2>\n<p>KA Customizer is a small GUI tool to tweak modules and themes of a knowledge\napp.</p>\n<h4 id=\"installing\">Installing</h4>\n<p>To install, open a terminal and copy and enter the following command.</p>\n<pre><code>bash -exc \"$(wget https://raw.githubusercontent.com/endlessm/eos-knowledge-lib/master/tools/ka-customizer-installer -O -)\"\n</code></pre>\n<p>Installing may take a while! The latest unstable versions of our flatpak\nruntimes (all the libraries our apps need to run), will need to be downloaded.\nWhen installing is done, you should see an icon called KA Customizer on your\ndesktop. Clicking it will open up the tool.</p>\n<h4 id=\"using\">Using</h4>\n<p>The tool will run your app content against the very latest version of\neos-knowledge-lib. If you don't have any knowledge apps installed, you won't\nbe able to run this tool, so download some from the app store first.</p>\n<p>The only required thing to select in the KA Customizer dialog is the knowledge\napp to run. Other than that, only tweak what you need to tweak!</p>\n<h2 id=\"kermit\">Kermit</h2>\n<p>Shards are our atomic unit for content delivery in Knowledge Apps. The <code>kermit</code> tool\ninspects shards files. It is included in the com.endless.Platform flatpak runtime.</p>\n<p>To list all records in a shard, use <code>kermit list &lt;path_to_shard_file&gt;</code>.</p>\n<p>To retrieve a blob in a record, use <code>kermit dump &lt;path_to_shard_file&gt; &lt;record_id&gt; &lt;blob_name&gt;</code>,\nwhere <code>&lt;blob_name&gt;</code> is commonly \"data\" or \"metadata\" to fetch those blobs for a given record.</p>\n<p>To do a basic search over a shard, use <code>kermit grep &lt;path_to_shard_file&gt; &lt;regex&gt;</code> to\nfind any records that have metadata that matches that regex.</p>\n<p>To get basic statistics and makeup of a shard file, use <code>kermit stat &lt;path_to_shard_file&gt;</code>.</p>\n<h2 id=\"eminem\">Eminem</h2>\n<p>Subscriptions are our mechanism for updating content in Knowledge Apps. A subscription\nconsists of multiple shards. The <code>eminem</code> tool inspects and manipulates subscriptions.\nIt is included in the com.endless.Platform flatpak runtime.</p>\n<p>To retrieve the subscription ID(s) for a given app ID, use <code>eminem inspect-app-id &lt;app_id&gt;</code>.</p>\n<p>After that, you can use <code>eminem freeze</code> and <code>eminem unfreeze</code> to marshal the state of\nthe subscription to a file that can be passed around for debugging. If you're seeing\nbizarre content in a subscription and are afraid of the article \"being lost\" before you\ncan investigate, you can use <code>freeze</code> and <code>unfreeze</code> to capture the state of a subscription\nand allow you to restore it for later.</p>\n<p>Subscriptions work through a <code>manifest.json</code> file that contains the shards that make up\nthe current state of the subscription. While normally these manifest files are generated\nby SOMA, if you are trying to build shards locally, it can be helpful to just be able to\ndrop an additional shard into a directory and regenerate the <code>manifest.json</code> file to include\nthe new shard. <code>eminem regenerate &lt;directory&gt;</code> allows you to do that.</p>\n<h2 id=\"autobahn\">Autobahn</h2>\n<p>Autobahn is a utility for compiling YAML app descriptions, such as those included in the <code>data/preset/</code> directory, to the JSON format loaded by eos-knowledge-lib.\nIt is included in the com.endlessm.Sdk flatpak runtime.</p>\n<p>The YAML app description format is meant to be easy to write by hand, and includes some shorthands for convenience.\nAutobahn compiles it into the more machine-readable JSON format.</p>\n<p>Usually you will not have to use this tool yourself, it will be called automatically when starting an app with a custom app description.</p>\n<h4 id=\"using1\">Using</h4>\n<p>Simple command to see how it works:</p>\n<pre><code>autobahn data/preset/encyclopedia.yaml\n</code></pre>\n<p>The above command spits out a big JSON object that is meant to be supplied to eos-knowledge-lib at the <code>resource:///app/app.json</code> path.</p>\n<p>If you want to write your own YAML app description that imports one of the YAML presets, you will need to use the <code>--include</code> option:</p>\n<pre><code>echo '!import encyclopedia' | autobahn -I data/preset\n</code></pre>\n<p>There are other options for internationalizing app descriptions, see <code>autobahn --help</code>.</p>\n<h2 id=\"picard\">Picard</h2>\n<p>Picard is a tool for previewing card types and arrangements. Content within our\nknowledge apps is displayed in ContentGroups. Each content group has an\n<code>arrangement</code> slot and each arrangement has a <code>card</code> slot. The arrangement +\ncard combo determine how content is displayed on a page.</p>\n<p>Picard allows you to experiment with different combinations of arrangements\nand card types to see what works best for your application.</p>\n<h4 id=\"using2\">Using</h4>\n<p>Simply enter <code>picard</code> into the terminal and hit enter. A GUI will appear,\nallowing you to select both arrangement and card types at ease. There are also\nconvenience buttons for resizing the window, so you can see how your\narrangement will look at different resolutions.</p>\n\n</div>\n\n\n\t", "url": "framework-0/tools.html#page-description"});