#!/bin/bash

# For those interested in Moltres' etymology, it goes something like this:
# app.json runner: runner --> Usain Bolt --> bolt of lightning --> Zapdos (lightning type pokemon) ---> Moltres (fire type pokemon)

export GI_TYPELIB_PATH="%typelibdir%${GI_TYPELIB_PATH:+:$GI_TYPELIB_PATH}"
export LD_LIBRARY_PATH="%pkglibdir%${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

if [ "$GJS_DEBUG_OUTPUT" == "" ]; then
    export GJS_DEBUG_OUTPUT=stderr
fi

if [ "$GJS_DEBUG_TOPICS" == "" ]; then
    export GJS_DEBUG_TOPICS="JS ERROR;JS LOG"
fi

DEBUG_COMMAND=""
if [ "$RUN_DEBUG" != "" ]; then
    DEBUG_COMMAND="gdb --args"
fi

if [ "$#" -lt 1 ]; then
    echo "Usage: moltres <path_to_app.json_file> <path_to_theme.css_file>"
    exit 1
fi

YAML_PATH="$1" && shift
JSON_PATH="$(mktemp --tmpdir XXXXXX.json)"
autobahn -o $JSON_PATH $YAML_PATH

CSS_PATH="$1" && shift

# Cleanup the temp JSON file
trap "rm -f $JSON_PATH" EXIT

SCRIPT="const Gio = imports.gi.Gio;
Gio.Resource.load('%pkgdatadir%/eos-knowledge.gresource')._register();
Gio.Resource.load('%pkgdatadir%/moltres.gresource')._register();
imports.searchPath.unshift('resource:///com/endlessm/knowledge/js');

const MoltresApplication = imports.app.moltresApplication;
let application = new MoltresApplication.MoltresApplication({
    app_json_path: '$JSON_PATH',
    css_path: '$CSS_PATH',
    application_id: 'com.endlessm.moltres',
});
application.run(['$0'].concat(ARGV));"

$DEBUG_COMMAND gjs -c "$SCRIPT" "$@"; exit $?
